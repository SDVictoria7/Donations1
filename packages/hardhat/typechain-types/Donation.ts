/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DonationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "donate"
      | "donors"
      | "donorsAddresses"
      | "getDonors"
      | "getOwner"
      | "getPaymentsSum"
      | "withdraw"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Donate"): EventFragment;

  encodeFunctionData(functionFragment: "donate", values?: undefined): string;
  encodeFunctionData(functionFragment: "donors", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "donorsAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getDonors", values?: undefined): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPaymentsSum",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donorsAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDonors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentsSum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DonateEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Donation extends BaseContract {
  connect(runner?: ContractRunner | null): Donation;
  waitForDeployment(): Promise<this>;

  interface: DonationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  donate: TypedContractMethod<[], [void], "payable">;

  donors: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { numPayments: bigint; paymentsSum: bigint }],
    "view"
  >;

  donorsAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getDonors: TypedContractMethod<[], [string[]], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getPaymentsSum: TypedContractMethod<[donor: AddressLike], [bigint], "view">;

  withdraw: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "donors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { numPayments: bigint; paymentsSum: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "donorsAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDonors"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPaymentsSum"
  ): TypedContractMethod<[donor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Donate"
  ): TypedContractEvent<
    DonateEvent.InputTuple,
    DonateEvent.OutputTuple,
    DonateEvent.OutputObject
  >;

  filters: {
    "Donate(address,uint256)": TypedContractEvent<
      DonateEvent.InputTuple,
      DonateEvent.OutputTuple,
      DonateEvent.OutputObject
    >;
    Donate: TypedContractEvent<
      DonateEvent.InputTuple,
      DonateEvent.OutputTuple,
      DonateEvent.OutputObject
    >;
  };
}
